;**********************************************************************;
;                                                                      ;
;   This file is part of FCSLIB, a file I/O library for the RSX180 OS. ;
;   Copyright (C) 1985-2022, Hector Peraza.                            ;
;                                                                      ;
;   This library is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU Library General Public        ;
;   License as published by the Free Software Foundation; either       ;
;   version 2 of the License, or (at your option) any later version.   ;
;                                                                      ;
;   This library is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU Library General Public License for more details.               ;
;                                                                      ;
;   You should have received a copy of the GNU Library General Public  ;
;   License along with this program; if not, write to the Free         ;
;   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. ;
;                                                                      ;
;**********************************************************************;

	.z80

	ident	/FCS1.2/

	include	SYSFN.INC
	include	QIO.INC
	include	FCSLIB.INC

CR	equ	0Dh
LF	equ	0Ah

	public	FRDBLK

	extrn	QIOBLK,QIOSB

	cseg

; Read a block.
;
; Input:
;   IX = Pointer to I/O structure
; Output:
;   AF = Result code, CY set on error
;   (HL is preserved)

FRDBLK:	push	hl
	ld	l,(ix+FC.BUF)	; buffer address
	ld	h,(ix+FC.BUF+1)
	ld	(QIOBLK+Q.BUF),hl
	bit	FM.TT,(ix+FC.MODE)
	jr	z,fr1		; branch if not tty
	ld	(hl),CR		; else output newline before reading
	inc	hl
	ld	(hl),LF
	ld	hl,2
	ld	(QIOBLK+Q.LEN),hl
	ld	a,(ix+FC.LUN)	; LUN
	ld	(QIOBLK+Q.LUN),a
	ld	a,(ix+FC.EFN)	; event flag number
	ld	(QIOBLK+Q.EFN),a
	ld	hl,IO.WVB	; function code
	ld	(QIOBLK+Q.FUNC),hl
	ld	hl,0
	ld	(QIOBLK+Q.AST),hl
	ld	(QIOBLK+Q.VFC),hl
	ld	hl,QIOBLK
	SC	.QIO		; output newline
fr1:	ld	l,(ix+FC.BLK)	; block number
	ld	h,(ix+FC.BLK+1)
	ld	(QIOBLK+Q.BLK),hl
	ld	l,(ix+FC.BLK+2)
	ld	h,(ix+FC.BLK+3)
	ld	(QIOBLK+Q.BLK+2),hl
	ld	hl,512		; length
	ld	(QIOBLK+Q.LEN),hl
	ld	a,(ix+FC.LUN)	; LUN
	ld	(QIOBLK+Q.LUN),a
	ld	a,(ix+FC.EFN)	; event flag number
	ld	(QIOBLK+Q.EFN),a
	ld	hl,IO.RVB	; function code
	ld	(QIOBLK+Q.FUNC),hl
	ld	hl,0		; offset within block
	ld	(QIOBLK+Q.OFS),hl
	ld	hl,QIOBLK
	SC	.QIO		; read block
	pop	hl
	ret	c
	ld	a,(QIOSB)
	ld	de,0
	or	a
	scf
	ret	nz
	set	FS.BV,(ix+FC.MODE)
	ld	de,(QIOSB+2)
	ld	(ix+FC.CNT),e
	ld	(ix+FC.CNT+1),d
	xor	a
	ret

	end
